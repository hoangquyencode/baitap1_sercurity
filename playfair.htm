<H<!doctype html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Playfair Cipher (Mã hóa / Giải mã)</title>
<style>
  body { font-family: Arial, sans-serif; max-width:900px; margin:30px auto; padding:0 16px; background:#fbfcfe; }
  h1 { text-align:center; color:#0b6; margin-bottom:10px; }
  label{font-weight:700; display:block; margin-top:12px;}
  input[type=text], textarea{width:100%; padding:10px; border-radius:6px; border:1px solid #ccc; box-sizing:border-box;}
  textarea{height:120px; font-family:monospace;}
  .row{display:flex; gap:10px; margin-top:12px;}
  button{flex:1; padding:12px; border-radius:8px; border:none; font-weight:700; cursor:pointer;}
  #enc{background:#2e7d32;color:#fff;} #dec{background:#1565c0;color:#fff;} #clear{background:#777;color:#fff;}
  #tablePreview{margin-top:10px; font-family:monospace; background:#fff; padding:10px; border-radius:6px; border:1px solid #e0e0e0;}
  pre{white-space:pre-wrap;}
</style>
</head>
<body>
  <h1>PLAYFAIR — Mã hóa / Giải mã</h1>

  <label>Khóa (Key):</label>
  <input id="key" placeholder="Nhập khóa (ví dụ: MONARCHY)">

  <label>Văn bản (plaintext hoặc ciphertext):</label>
  <textarea id="text" placeholder="Nhập văn bản..."></textarea>

  <div class="row">
    <button id="enc">Mã hóa</button>
    <button id="dec">Giải mã</button>
    <button id="clear">Xóa</button>
  </div>

  <label>Kết quả:</label>
  <textarea id="out" readonly></textarea>

  <div id="tablePreview"></div>

<script>
// Normalize: chữ hoa, giữ chữ, thay J->I
function normalizeAlpha(s) {
  return s.split('').filter(c => /[A-Za-z]/.test(c)).map(c => {
    let C = c.toUpperCase();
    if (C === 'J') C = 'I';
    return C;
  }).join('');
}

// Tạo bảng 5x5
function createTable(key) {
  const used = {};
  const arr = [];
  const k = normalizeAlpha(key);
  for (const ch of k) {
    if (!used[ch]) { used[ch] = true; if (ch !== 'J') arr.push(ch); }
  }
  for (let code=65; code<=90; code++) {
    const ch = String.fromCharCode(code);
    if (ch === 'J') continue;
    if (!used[ch]) { used[ch] = true; arr.push(ch); }
  }
  return arr.slice(0,25);
}

// Tạo cặp theo quy tắc Playfair
function makePairs(plain) {
  const s = normalizeAlpha(plain);
  const pairs = [];
  for (let i=0;i<s.length;) {
    const a = s[i];
    const b = (i+1 < s.length) ? s[i+1] : null;
    if (b === null) {
      pairs.push([a,'X']); i++;
    } else if (a === b) {
      pairs.push([a,'X']); i++;
    } else {
      pairs.push([a,b]); i+=2;
    }
  }
  return pairs;
}

function posInTable(table, ch) {
  for (let i=0;i<25;i++) if (table[i] === ch) return [Math.floor(i/5), i%5];
  return [-1,-1];
}

function processPair(table, pair, encrypt=true) {
  const [r1,c1] = posInTable(table, pair[0]);
  const [r2,c2] = posInTable(table, pair[1]);
  if (r1 === r2) {
    // same row
    if (encrypt) return [ table[r1*5 + ((c1+1)%5)], table[r2*5 + ((c2+1)%5)] ];
    else return [ table[r1*5 + ((c1+4)%5)], table[r2*5 + ((c2+4)%5)] ];
  } else if (c1 === c2) {
    // same column
    if (encrypt) return [ table[((r1+1)%5)*5 + c1], table[((r2+1)%5)*5 + c2] ];
    else return [ table[((r1+4)%5)*5 + c1], table[((r2+4)%5)*5 + c2] ];
  } else {
    // rectangle
    return [ table[r1*5 + c2], table[r2*5 + c1] ];
  }
}

function playfairEncrypt(plain, key) {
  const table = createTable(key);
  const pairs = makePairs(plain);
  let out = '';
  for (const p of pairs) {
    const q = processPair(table, p, true);
    out += q[0] + q[1];
  }
  return out;
}

function playfairDecrypt(cipher, key) {
  const table = createTable(key);
  const s = normalizeAlpha(cipher);
  let out = '';
  for (let i=0;i<s.length;i+=2) {
    const a = s[i];
    const b = (i+1<s.length) ? s[i+1] : 'X';
    const q = processPair(table, [a,b], false);
    out += q[0] + q[1];
  }
  return out;
}

// Hiển thị bảng
function renderTable(table) {
  let html = '<div style="margin-top:12px;"><strong>Bảng 5x5:</strong><pre>';
  for (let r=0;r<5;r++) {
    for (let c=0;c<5;c++) html += table[r*5 + c] + ' ';
    html += '\n';
  }
  html += '</pre></div>';
  return html;
}

// Events
document.getElementById('enc').onclick = () => {
  const key = document.getElementById('key').value;
  const text = document.getElementById('text').value;
  const table = createTable(key);
  document.getElementById('out').value = playfairEncrypt(text, key);
  document.getElementById('tablePreview').innerHTML = renderTable(table);
};
document.getElementById('dec').onclick = () => {
  const key = document.getElementById('key').value;
  const text = document.getElementById('text').value;
  const table = createTable(key);
  document.getElementById('out').value = playfairDecrypt(text, key);
  document.getElementById('tablePreview').innerHTML = renderTable(table);
};
document.getElementById('clear').onclick = () => {
  document.getElementById('key').value='';
  document.getElementById('text').value='';
  document.getElementById('out').value='';
  document.getElementById('tablePreview').innerHTML='';
};
</script>
</body>
</html>

